use teloxide::{prelude::*, types::Message};
use crate::db::queries;

pub async fn handle_message(bot: Bot, msg: Message) -> ResponseResult<()> {
    let chat_id = msg.chat.id;

    // üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if let Some(text) = msg.text() {
        if text == "/start" {
            queries::register_user(chat_id.0).await.ok();
            bot.send_message(chat_id, "üçΩÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–∏—à–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –∞—É–¥–∏–æ –≤—Å—ë —á—Ç–æ —Ç—ã –µ–ª ‚Äî —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é!").await?;
        } else {
            let result = crate::services::nutrition::analyze_food_description(text).await;
            bot.send_message(chat_id, result).await?;
        }
        return Ok(());
    }

    // –§–æ—Ç–æ
    if let Some(photos) = msg.photo() {
        if let Some(photo) = photos.last() {
            let file_id = &photo.file.id;
            let file = bot.get_file(file_id).send().await?;
            let path = file.path;
            let token = std::env::var("TELEGRAM_BOT_TOKEN").unwrap();
            let url = format!("https://api.telegram.org/file/bot{}/{}", token, path);
            let result = crate::services::nutrition::analyze_image(&url).await;
            bot.send_message(chat_id, result).await?;
        }
        return Ok(());
    }

    // –ì–æ–ª–æ—Å
    if let Some(voice) = msg.voice() {
        let file_id = &voice.file.id;
        let file = bot.get_file(file_id).send().await?;
        let path = file.path;
        let token = std::env::var("TELEGRAM_BOT_TOKEN").unwrap();
        let url = format!("https://api.telegram.org/file/bot{}/{}", token, path);
        let result = crate::services::nutrition::analyze_audio(&url).await;
        bot.send_message(chat_id, result).await?;
        return Ok(());
    }

    // ‚ÑπÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.").await?;
    Ok(())
}
